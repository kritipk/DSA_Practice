class Solution {
public:
    vector<int> topKFrequent(vector<int>& nums, int k) {
        unordered_map<int, int> mp;
        for (auto i:nums) mp[i]++;

        vector<pair<int,int>> f;
        for (auto i: mp) f.push_back({i.second, i.first});

        int idx = dnc(f, k, 0, f.size()-1);

        vector<int> ans;
        for (int i=0; i<=idx; i++)
            ans.push_back(f[i].second);

        return ans;
    }

    int dnc(vector<pair<int,int>>& f, int k, int l, int r) {
        if (l<=r) {
            int pi = helper(f, l, r);
            if (pi+1 == k) return pi;
            else if (pi+1 > k) return dnc(f, k, l, pi-1);
            else return dnc(f, k, pi+1, r);
        }

        return -1;
    }

    int helper(vector<pair<int, int>>& f, int l, int r) {
        int pi = f[r].first;
        int i = l;

        for (int j=l; j<r; j++) 
            if (f[j].first > pi) 
                swap(f[j], f[i++]);

        swap(f[r], f[i]);

        return i;
    }
};
